diff -Naur linux_org/fs/buffer.c linux/fs/buffer.c
--- linux_org/fs/buffer.c	2021-10-20 17:40:18.000000000 +0800
+++ linux/fs/buffer.c	2022-09-06 09:58:05.948020657 +0800
@@ -1480,7 +1480,7 @@
 	/*
 	 * Check for overflow
 	 */
-	BUG_ON(stop > PAGE_SIZE || stop < length);
+	BUG_ON(stop > thp_size(page) || stop < length);
 
 	head = page_buffers(page);
 	bh = head;
@@ -1508,7 +1508,7 @@
 	 * The get_block cached value has been unconditionally invalidated,
 	 * so real IO is not possible anymore.
 	 */
-	if (length == PAGE_SIZE)
+	if (length >= PAGE_SIZE)
 		try_to_release_page(page, 0);
 out:
 	return;
diff -Naur linux_org/include/linux/huge_mm.h linux/include/linux/huge_mm.h
--- linux_org/include/linux/huge_mm.h	2021-10-20 17:40:18.000000000 +0800
+++ linux/include/linux/huge_mm.h	2022-09-06 23:52:17.092801758 +0800
@@ -251,6 +251,11 @@
 	return 1;
 }
 
+static inline unsigned long thp_size(struct page *page)
+{
+	return page_size(page);
+}
+
 struct page *follow_devmap_pmd(struct vm_area_struct *vma, unsigned long addr,
 		pmd_t *pmd, int flags, struct dev_pagemap **pgmap);
 struct page *follow_devmap_pud(struct vm_area_struct *vma, unsigned long addr,
@@ -311,6 +316,7 @@
 }
 
 #define hpage_nr_pages(x) 1
+#define thp_size(x)		PAGE_SIZE
 
 static inline bool __transparent_hugepage_enabled(struct vm_area_struct *vma)
 {
