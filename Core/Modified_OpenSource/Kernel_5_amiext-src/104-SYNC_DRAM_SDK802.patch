--- linux/drivers/edac/aspeed_edac.c	2022-07-12 03:03:08.542082805 +0800
+++ linux_new/drivers/edac/aspeed_edac.c	2022-07-12 03:02:01.802966557 +0800
@@ -20,7 +20,6 @@
 
 #define ASPEED_MCR_PROT        0x00 /* protection key register */
 #define ASPEED_MCR_CONF        0x04 /* configuration register */
-#define ASPEED_MCR_REQ         0x08 /* Graphics Memory Protection register */
 #define ASPEED_MCR_INTR_CTRL   0x50 /* interrupt control/status register */
 #define ASPEED_MCR_ADDR_UNREC  0x58 /* address of first un-recoverable error */
 #define ASPEED_MCR_ADDR_REC    0x5c /* address of last recoverable error */
@@ -77,7 +76,6 @@
 	}
 }
 
-
 static const struct regmap_config aspeed_regmap_config = {
 	.reg_bits = 32,
 	.val_bits = 32,
@@ -89,63 +87,6 @@
 	.fast_io = true,
 };
 
-static const u32 ast2400_dram_table[] = {
-	0x04000000,     //64MB
-	0x08000000,     //128MB
-	0x10000000,     //256MB
-	0x20000000,     //512MB
-};
-
-static const u32 ast2500_dram_table[] = {
-	0x08000000,     //128MB
-	0x10000000,     //256MB
-	0x20000000,     //512MB
-	0x40000000,     //1024MB
-};
-
-static const u32 ast2600_dram_table[] = {
-	0x10000000,     //256MB
-	0x20000000,     //512MB
-	0x40000000,     //1024MB
-	0x80000000,     //2048MB
-};
-
-extern u32 aspeed_get_dram_size(void)
-{
-	u32 reg04;
-	u32 size;
-
-	regmap_read(aspeed_regmap, ASPEED_MCR_CONF, &reg04);
-
-#if defined(CONFIG_MACH_ASPEED_G6)
-	size = ast2600_dram_table[reg04 & 0x3];
-#elif defined(CONFIG_MACH_ASPEED_G5)
-	size = ast2500_dram_table[reg04 & 0x3];
-#else
-	size = ast2400_dram_table[reg04 & 0x3];
-#endif
-	return size;
-}
-EXPORT_SYMBOL(aspeed_get_dram_size);
-
-static const u32 aspeed_vga_table[] = {
-	0x800000,       //8MB
-	0x1000000,      //16MB
-	0x2000000,      //32MB
-	0x4000000,      //64MB
-};
-
-extern u32 aspeed_get_vga_size(void)
-{
-	u32 reg04;
-	u32 size;
-
-	regmap_read(aspeed_regmap, ASPEED_MCR_CONF, &reg04);
-
-	size = aspeed_vga_table[((reg04 & 0xC) >> 2)];
-	return size;
-}
-EXPORT_SYMBOL(aspeed_get_vga_size);
 
 static void count_rec(struct mem_ctl_info *mci, u8 rec_cnt, u32 rec_addr)
 {
@@ -312,7 +253,7 @@
 		return rc;
 	}
 
-	dev_info(mci->pdev, "dt: /memory node resources: first page %pR, PAGE_SHIFT macro=0x%x\n",
+	dev_dbg(mci->pdev, "dt: /memory node resources: first page %pR, PAGE_SHIFT macro=0x%x\n",
 		&r, PAGE_SHIFT);
 
 	csrow->first_page = r.start >> PAGE_SHIFT;
@@ -323,11 +264,12 @@
 	dram_type = (reg04 & ASPEED_MCR_CONF_DRAM_TYPE) ? MEM_DDR4 : MEM_DDR3;
 
 	dimm = csrow->channels[0]->dimm;
+	dimm->grain = 1;
 	dimm->mtype = dram_type;
 	dimm->edac_mode = EDAC_SECDED;
 	dimm->nr_pages = nr_pages / csrow->nr_channels;
 
-	dev_info(mci->pdev, "initialized dimm with first_page=0x%lx and nr_pages=0x%x\n",
+	dev_dbg(mci->pdev, "initialized dimm with first_page=0x%lx and nr_pages=0x%x\n",
 		csrow->first_page, nr_pages);
 
 	return 0;
@@ -340,7 +282,7 @@
 	struct edac_mc_layer layers[2];
 	struct mem_ctl_info *mci;
 	void __iomem *regs;
-	//u32 reg04;
+	u32 reg04;
 	int rc;
 
 	regs = devm_platform_ioremap_resource(pdev, 0);
@@ -353,11 +295,11 @@
 		return PTR_ERR(aspeed_regmap);
 
 	/* bail out if ECC mode is not configured */
-	//regmap_read(aspeed_regmap, ASPEED_MCR_CONF, &reg04);
-	//if (!(reg04 & ASPEED_MCR_CONF_ECC)) {
-	//	dev_err(&pdev->dev, "ECC mode is not configured in u-boot\n");
-	//	return -EPERM;
-	//}
+	regmap_read(aspeed_regmap, ASPEED_MCR_CONF, &reg04);
+	if (!(reg04 & ASPEED_MCR_CONF_ECC)) {
+		dev_err(&pdev->dev, "ECC mode is not configured in u-boot\n");
+		return -EPERM;
+	}
 
 	edac_op_state = EDAC_OPSTATE_INT;
 
