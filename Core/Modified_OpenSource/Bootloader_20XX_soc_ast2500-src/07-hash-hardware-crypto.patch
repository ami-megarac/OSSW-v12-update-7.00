diff -Naur uboot_orig/arch/arm/dts/ast2500.dtsi uboot/arch/arm/dts/ast2500.dtsi
--- uboot_orig/arch/arm/dts/ast2500.dtsi	2023-04-03 18:04:39.226904904 +0530
+++ uboot/arch/arm/dts/ast2500.dtsi	2023-04-03 18:07:35.541142230 +0530
@@ -212,6 +212,15 @@
 				quality = <100>;
 			};
 
+			hace: hace@1e6e3000 {
+				compatible = "aspeed,ast2500-hace";
+				reg = <0x1e6e3000 0x200>;
+				interrupts = <4>;
+				clocks = <&scu ASPEED_CLK_GATE_YCLK>;
+				clock-names = "yclk";
+				status = "disabled";
+			};
+
 			gfx: display@1e6e6000 {
 				compatible = "aspeed,ast2500-gfx", "syscon";
 				reg = <0x1e6e6000 0x1000>;
diff -Naur uboot_orig/arch/arm/dts/ast2500-evb.dts uboot/arch/arm/dts/ast2500-evb.dts
--- uboot_orig/arch/arm/dts/ast2500-evb.dts	2023-04-03 18:04:39.214904752 +0530
+++ uboot/arch/arm/dts/ast2500-evb.dts	2023-04-03 18:08:06.557535618 +0530
@@ -100,3 +100,8 @@
         status = "okay";
 
 };
+
+&hace {
+       u-boot,dm-pre-reloc;
+       status = "okay";
+};
diff -Naur uboot_orig/drivers/clk/aspeed/clk_ast2500.c uboot/drivers/clk/aspeed/clk_ast2500.c
--- uboot_orig/drivers/clk/aspeed/clk_ast2500.c	2023-04-03 18:04:39.186904397 +0530
+++ uboot/drivers/clk/aspeed/clk_ast2500.c	2023-04-03 18:09:28.982580777 +0530
@@ -541,6 +541,26 @@
 	return 0;
 }
 
+#define SCU_CLKSTOP_HACE 13
+
+static ulong ast2500_enable_haceclk(struct ast2500_scu *scu)
+{
+	u32 reset_bit;
+	u32 clkstop_bit;
+
+	reset_bit = BIT(ASPEED_RESET_HACE);
+	clkstop_bit = BIT(SCU_CLKSTOP_HACE);
+
+	setbits_le32(&scu->sysreset_ctrl1, reset_bit);
+	udelay(100);
+	clrbits_le32(&scu->clk_stop_ctrl1, clkstop_bit);
+	mdelay(10);
+
+	clrbits_le32(&scu->sysreset_ctrl1, reset_bit);
+
+	return 0;
+}
+
 static int ast2500_clk_enable(struct clk *clk)
 {
 	struct ast2500_clk_priv *priv = dev_get_priv(clk->dev);
@@ -566,6 +586,9 @@
 	case ASPEED_CLK_GATE_SDEXTCLK:
 		ast2500_enable_extsdclk(priv->scu);
 		break;
+	case ASPEED_CLK_GATE_YCLK:
+		ast2500_enable_haceclk(priv->scu);
+		break;
 	default:
 		pr_debug("can't enable clk \n");
 		return -ENOENT;
diff -Naur uboot_orig/drivers/crypto/aspeed/aspeed_hace.c uboot/drivers/crypto/aspeed/aspeed_hace.c
--- uboot_orig/drivers/crypto/aspeed/aspeed_hace.c	1970-01-01 05:30:00.000000000 +0530
+++ uboot/drivers/crypto/aspeed/aspeed_hace.c	2023-04-03 17:43:54.971058810 +0530
@@ -0,0 +1,244 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * (C) Copyright ASPEED Technology Inc.
+ * Copyright 2021 IBM Corp.
+ */
+#include <common.h>
+#include <clk.h>
+
+#include <log.h>
+#include <asm/io.h>
+#include <malloc.h>
+#include <hash.h>
+
+#include <dm/device.h>
+#include <dm/fdtaddr.h>
+
+#include <linux/bitops.h>
+#include <linux/delay.h>
+#include <linux/kernel.h>
+#include <linux/iopoll.h>
+
+#define ASPEED_HACE_STS			0x1C
+#define  HACE_RSA_ISR			BIT(13)
+#define  HACE_CRYPTO_ISR		BIT(12)
+#define  HACE_HASH_ISR			BIT(9)
+#define  HACE_RSA_BUSY			BIT(2)
+#define  HACE_CRYPTO_BUSY		BIT(1)
+#define  HACE_HASH_BUSY			BIT(0)
+#define ASPEED_HACE_HASH_SRC		0x20
+#define ASPEED_HACE_HASH_DIGEST_BUFF	0x24
+#define ASPEED_HACE_HASH_KEY_BUFF	0x28
+#define ASPEED_HACE_HASH_DATA_LEN	0x2C
+#define  HACE_SG_LAST			BIT(31)
+#define ASPEED_HACE_HASH_CMD		0x30
+#define  HACE_HASH_ISR_EN		BIT(9)
+#define  HACE_SHA_BE_EN			BIT(3)
+#define  HACE_MD5_LE_EN			BIT(2)
+#define  HACE_ALGO_MD5			0
+#define  HACE_ALGO_SHA1			BIT(5)
+#define  HACE_ALGO_SHA224		BIT(6)
+#define  HACE_ALGO_SHA256		(BIT(4) | BIT(6))
+#define  HASH_CMD_ACC_MODE		(0x2 << 7)
+#define  HACE_SG_EN			BIT(18)
+
+#define ASPEED_SHA1_DIGEST_SIZE		20
+#define ASPEED_SHA224_DIGEST_SIZE	28
+#define ASPEED_SHA256_DIGEST_SIZE	32
+
+#define ASPEED_SHA_TYPE_SHA1		1
+#define ASPEED_SHA_TYPE_SHA224		2
+#define ASPEED_SHA_TYPE_SHA256		3
+
+struct aspeed_hash_ctx {
+	u8 digest[64]; /* Must be 8 byte aligned */
+	u32 method;
+	u32 digest_size;
+	u32 block_size;
+	u32 length;
+	u32 src_addr;
+};
+
+struct aspeed_hace {
+	struct clk clk;
+};
+
+static const u32 sha1_iv[8] = {
+	0x01234567UL, 0x89abcdefUL, 0xfedcba98UL, 0x76543210UL,
+	0xf0e1d2c3UL, 0, 0, 0
+};
+
+static const u32 sha224_iv[8] = {
+	0xd89e05c1UL, 0x07d57c36UL, 0x17dd7030UL, 0x39590ef7UL,
+	0x310bc0ffUL, 0x11155868UL, 0xa78ff964UL, 0xa44ffabeUL
+};
+
+static const u32 sha256_iv[8] = {
+	0x67e6096aUL, 0x85ae67bbUL, 0x72f36e3cUL, 0x3af54fa5UL,
+	0x7f520e51UL, 0x8c68059bUL, 0xabd9831fUL, 0x19cde05bUL
+};
+
+static phys_addr_t base;
+
+static int aspeed_hace_wait_completion(u32 reg, u32 flag, int timeout_us)
+{
+	u32 val;
+	return readl_poll_timeout(reg, val, (val & flag) == flag, timeout_us);
+}
+
+static int hash_trigger(struct aspeed_hash_ctx *ctx)
+{
+	if (readl(base + ASPEED_HACE_STS) & HACE_HASH_BUSY) {
+		debug("HACE error: engine busy\n");
+		return -EBUSY;
+	}
+	/* Clear pending completion status */
+	writel(HACE_HASH_ISR, base + ASPEED_HACE_STS);
+
+	writel((u32)ctx->src_addr, base + ASPEED_HACE_HASH_SRC);
+	writel((u32)ctx->digest, base + ASPEED_HACE_HASH_DIGEST_BUFF);
+	writel((u32)ctx->length, base + ASPEED_HACE_HASH_DATA_LEN);
+	writel(ctx->method, base + ASPEED_HACE_HASH_CMD);
+
+	/* SHA512 hashing appears to have a througput of about 12MB/s */
+	return aspeed_hace_wait_completion(base + ASPEED_HACE_STS,
+			HACE_HASH_ISR,
+			1000 + (ctx->length >> 3));
+}
+
+#if IS_ENABLED(CONFIG_SHA_HW_ACCEL)
+static int sha_digest(const void *src, unsigned int length, void *digest,
+		u32 sha_type)
+{
+	struct aspeed_hash_ctx *ctx;
+	int ret;
+
+	if (!((u32)src & BIT(31))) {
+		debug("HACE src out of bounds: can only copy from SDRAM\n");
+		return -EINVAL;
+	}
+
+	if (readl(base + ASPEED_HACE_STS) & HACE_HASH_BUSY) {
+		debug("HACE error: engine busy\n");
+		return -EBUSY;
+	}
+	ctx = memalign(8, sizeof(struct aspeed_hash_ctx));
+	memset(ctx, '\0', sizeof(struct aspeed_hash_ctx));
+
+	if (!ctx) {
+		debug("HACE error: Cannot allocate memory for context\n");
+		return -ENOMEM;
+	}
+	ctx->method =  HACE_SHA_BE_EN ;
+
+	switch (sha_type) {
+		case ASPEED_SHA_TYPE_SHA1:
+			ctx->block_size = 64;
+			ctx->digest_size = 20;
+			ctx->method |= HACE_ALGO_SHA1;
+			memcpy(ctx->digest, sha1_iv, 32);
+			break;
+		case ASPEED_SHA_TYPE_SHA224:
+			ctx->block_size = 64;
+			ctx->digest_size = 28;
+			ctx->method |= HACE_ALGO_SHA224;
+			memcpy(ctx->digest, sha224_iv, 32);
+			break;
+		case ASPEED_SHA_TYPE_SHA256:
+			ctx->block_size = 64;
+			ctx->digest_size = 32;
+			ctx->method |= HACE_ALGO_SHA256;
+			memcpy(ctx->digest, sha256_iv, 32);
+			break;
+		default:
+			return -ENOTSUPP;
+	}
+
+	ctx->src_addr = (u32)src;
+	ctx->length = length;
+
+	ret = hash_trigger(ctx);
+	memcpy(digest, ctx->digest, ctx->digest_size);
+	free(ctx);
+
+	return ret;
+}
+
+void hw_sha1(const unsigned char *pbuf, unsigned int buf_len,
+		unsigned char *pout, unsigned int chunk_size)
+{
+	int rc;
+
+	rc = sha_digest(pbuf, buf_len, pout, ASPEED_SHA_TYPE_SHA1);
+	if (rc)
+		debug("HACE failure: %d\n", rc);
+}
+
+void hw_sha256(const unsigned char *pbuf, unsigned int buf_len,
+		unsigned char *pout, unsigned int chunk_size)
+{
+	int rc;
+
+	rc = sha_digest(pbuf, buf_len, pout, ASPEED_SHA_TYPE_SHA256);
+	if (rc)
+		debug("HACE failure: %d\n", rc);
+}
+
+void hw_sha224(const unsigned char *pbuf, unsigned int buf_len,
+		unsigned char *pout, unsigned int chunk_size)
+{
+	int rc;
+
+	rc = sha_digest(pbuf, buf_len, pout, ASPEED_SHA_TYPE_SHA224);
+	if (rc)
+		debug("HACE failure: %d\n", rc);
+}
+
+static int aspeed_hace_probe(struct udevice *dev)
+{
+	struct aspeed_hace *hace = dev_get_priv(dev);
+	int ret;
+
+	ret = clk_get_by_index(dev, 0, &hace->clk);
+	if (ret < 0) {
+		debug("Can't get clock for %s: %d\n", dev->name, ret);
+		return ret;
+	}
+
+	ret = clk_enable(&hace->clk);
+	if (ret) {
+		debug("Failed to enable fsi clock (%d)\n", ret);
+		return ret;
+	}
+
+	/* As the crypto code does not pass us any driver state */
+	base = devfdt_get_addr(dev);
+	debug("crypto base address is %08lx\n", base);
+
+	return ret;
+}
+#endif
+
+static int aspeed_hace_remove(struct udevice *dev)
+{
+	struct aspeed_hace *hace = dev_get_priv(dev);
+
+	clk_disable(&hace->clk);
+
+	return 0;
+}
+
+static const struct udevice_id aspeed_hace_ids[] = {
+	{ .compatible = "aspeed,ast2500-hace" },
+	{ }
+};
+
+U_BOOT_DRIVER(aspeed_hace) = {
+	.name		= "aspeed_hace",
+	.id		= UCLASS_MISC,
+	.of_match	= aspeed_hace_ids,
+	.probe		= aspeed_hace_probe,
+	.remove		= aspeed_hace_remove,
+	.priv_auto_alloc_size = sizeof(struct aspeed_hace),
+	.flags  = DM_FLAG_PRE_RELOC,
+};
diff -Naur uboot_orig/drivers/crypto/aspeed/Makefile uboot/drivers/crypto/aspeed/Makefile
--- uboot_orig/drivers/crypto/aspeed/Makefile	1970-01-01 05:30:00.000000000 +0530
+++ uboot/drivers/crypto/aspeed/Makefile	2023-04-03 17:43:54.971058810 +0530
@@ -0,0 +1 @@
+obj-$(CONFIG_ASPEED_HACE) += aspeed_hace.o
diff -Naur uboot_orig/drivers/crypto/Kconfig uboot/drivers/crypto/Kconfig
--- uboot_orig/drivers/crypto/Kconfig	2023-04-03 18:04:39.178904295 +0530
+++ uboot/drivers/crypto/Kconfig	2023-04-03 18:10:24.459284015 +0530
@@ -1,5 +1,17 @@
 menu "Hardware crypto devices"
 
+config ASPEED_HACE
+       bool "ASPEED Hash and Crypto Engine"
+       depends on ASPEED_AST2500
+       imply SHA_HW_ACCEL
+       imply CMD_HASH
+       help
+        Select this option to enable a driver for using the SHA engine in
+        the ASPEED BMC SoCs.
+
+        Enabling this allows the use of SHA operations in hardware without requiring the
+        SHA software implementations, saving code size.
+
 source drivers/crypto/fsl/Kconfig
 
 endmenu
diff -Naur uboot_orig/drivers/crypto/Makefile uboot/drivers/crypto/Makefile
--- uboot_orig/drivers/crypto/Makefile	2023-04-03 18:04:39.178904295 +0530
+++ uboot/drivers/crypto/Makefile	2023-04-03 18:10:34.191407366 +0530
@@ -6,3 +6,4 @@
 obj-$(CONFIG_EXYNOS_ACE_SHA)	+= ace_sha.o
 obj-y += rsa_mod_exp/
 obj-y += fsl/
+obj-$(CONFIG_ARCH_ASPEED) += aspeed/
diff -Naur uboot_orig/oem/ami/fmh/hrotcore.c uboot/oem/ami/fmh/hrotcore.c
--- uboot_orig/oem/ami/fmh/hrotcore.c	2023-04-03 18:04:39.342906378 +0530
+++ uboot/oem/ami/fmh/hrotcore.c	2023-04-03 18:12:37.208966105 +0530
@@ -5,6 +5,8 @@
 # include <flash.h>
 # include "cmd.h"
 # include <oem/ami/fmh/fmh.h>
+# include <hash.h>
+# include <hw_sha.h>
 
 #ifdef CONFIG_SPX_FEATURE_BMC_DATA_FOR_TPM_SUPPORT
     #include <environment.h>
@@ -25,16 +27,32 @@
 #define KEY_INFO_LENGTH		4096
 #define HASH_BLK_SIZE           262144
 
-static sha256_context ctx;
+//AMI Hardware hash crypto
+#define SHA256 "sha256"
+
+#define HROT_IMAGE_UPLOAD_LOCATION    (YAFU_IMAGE_UPLOAD_LOCATION + 0x01000000)
+static unsigned long hash_calc_size = 0;
+
+struct hash_algo *algo;
+
 static UINT32 boot_fmh_location,product_info_offset=0;
-static char placeToHash[HASH_BLK_SIZE];
+
+
 #ifdef CONFIG_SPX_FEATURE_BMC_DATA_FOR_TPM_SUPPORT
     static UINT32 totalsize=0;
 #endif
 
 void
 hrot_start(){
-	sha256_starts(&ctx);
+	int ret = 0;
+
+	ret = hash_progressive_lookup_algo(SHA256, &algo);
+	if (ret) {
+		printf("%s error lookup of hash algorithm\n", __func__);
+		return;
+	}
+
+	hash_calc_size = 0;
 	return;
 }
 
@@ -45,12 +63,13 @@
 int
 hrot_update(unsigned short ModType, void *ModName, UINT32 location, UINT32 AllocSize, UINT32 fmhLocation, unsigned long startaddress){
 #endif
-	int hs_size=HASH_BLK_SIZE;
+	unsigned int hs_size=HASH_BLK_SIZE;
 	UINT32 stopHash;
         unsigned char *hash_data;
         int rc = 0;
 	UINT32 hash_start, size_to_hash;
 	struct spi_flash *flash;
+	unsigned char placeToHash[HASH_BLK_SIZE];
 #ifdef CONFIG_SPX_FEATURE_DEDICATED_SPI_FLASH_BANK
 	int flash_select = 0;
 	/* In case of Dedicated SPI - Select SPI based on the image to boot*/
@@ -130,7 +149,8 @@
 							memset(&hash_data[50], 0, 4);
 						}
 
-                        sha256_update(&ctx, hash_data, hs_size);
+                        memcpy ((unsigned char *)(HROT_IMAGE_UPLOAD_LOCATION + hash_calc_size), hash_data, hs_size);
+                        hash_calc_size += hs_size;
                         hash_start += hs_size;
                 }
 #ifdef CONFIG_SPX_FEATURE_BMC_DATA_FOR_TPM_SUPPORT		
@@ -202,7 +222,7 @@
 			puts("\nspi_flash_probe failed");
 			hang();
 		}
-        sha256_finish(&ctx, output);
+        algo->hash_func_ws((u8 *)HROT_IMAGE_UPLOAD_LOCATION, hash_calc_size, output, 64 * 1024);
 
 
 	   rc = spi_flash_read(flash,keyInfo, KEY_INFO_LENGTH*4, linebuf);
